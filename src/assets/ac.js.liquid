/*
 *  Remodal - v1.1.1
 *  Responsive, lightweight, fast, synchronized with CSS animations, fully customizable modal window plugin with declarative configuration and hash tracking.
 *  http://vodkabears.github.io/remodal/
 *
 *  Made by Ilya Makarov
 *  Under MIT License
 */

!function(a,b){"function"==typeof define&&define.amd?define(["jquery"],function(c){return b(a,c)}):"object"==typeof exports?b(a,require("jquery")):b(a,a.jQuery||a.Zepto)}(this,function(a,b){"use strict";function c(a){if(w&&"none"===a.css("animation-name")&&"none"===a.css("-webkit-animation-name")&&"none"===a.css("-moz-animation-name")&&"none"===a.css("-o-animation-name")&&"none"===a.css("-ms-animation-name"))return 0;var b,c,d,e,f=a.css("animation-duration")||a.css("-webkit-animation-duration")||a.css("-moz-animation-duration")||a.css("-o-animation-duration")||a.css("-ms-animation-duration")||"0s",g=a.css("animation-delay")||a.css("-webkit-animation-delay")||a.css("-moz-animation-delay")||a.css("-o-animation-delay")||a.css("-ms-animation-delay")||"0s",h=a.css("animation-iteration-count")||a.css("-webkit-animation-iteration-count")||a.css("-moz-animation-iteration-count")||a.css("-o-animation-iteration-count")||a.css("-ms-animation-iteration-count")||"1";for(f=f.split(", "),g=g.split(", "),h=h.split(", "),e=0,c=f.length,b=Number.NEGATIVE_INFINITY;e<c;e++)d=parseFloat(f[e])*parseInt(h[e],10)+parseFloat(g[e]),d>b&&(b=d);return b}function d(){if(b(document).height()<=b(window).height())return 0;var a,c,d=document.createElement("div"),e=document.createElement("div");return d.style.visibility="hidden",d.style.width="100px",document.body.appendChild(d),a=d.offsetWidth,d.style.overflow="scroll",e.style.width="100%",d.appendChild(e),c=e.offsetWidth,d.parentNode.removeChild(d),a-c}function e(){if(!x){var a,c,e=b("html"),f=k("is-locked");e.hasClass(f)||(c=b(document.body),a=parseInt(c.css("padding-right"),10)+d(),c.css("padding-right",a+"px"),e.addClass(f))}}function f(){if(!x){var a,c,e=b("html"),f=k("is-locked");e.hasClass(f)&&(c=b(document.body),a=parseInt(c.css("padding-right"),10)-d(),c.css("padding-right",a+"px"),e.removeClass(f))}}function g(a,b,c,d){var e=k("is",b),f=[k("is",u.CLOSING),k("is",u.OPENING),k("is",u.CLOSED),k("is",u.OPENED)].join(" ");a.$bg.removeClass(f).addClass(e),a.$overlay.removeClass(f).addClass(e),a.$wrapper.removeClass(f).addClass(e),a.$modal.removeClass(f).addClass(e),a.state=b,!c&&a.$modal.trigger({type:b,reason:d},[{reason:d}])}function h(a,d,e){var f=0,g=function(a){a.target===this&&f++},h=function(a){a.target===this&&0===--f&&(b.each(["$bg","$overlay","$wrapper","$modal"],function(a,b){e[b].off(r+" "+s)}),d())};b.each(["$bg","$overlay","$wrapper","$modal"],function(a,b){e[b].on(r,g).on(s,h)}),a(),0===c(e.$bg)&&0===c(e.$overlay)&&0===c(e.$wrapper)&&0===c(e.$modal)&&(b.each(["$bg","$overlay","$wrapper","$modal"],function(a,b){e[b].off(r+" "+s)}),d())}function i(a){a.state!==u.CLOSED&&(b.each(["$bg","$overlay","$wrapper","$modal"],function(b,c){a[c].off(r+" "+s)}),a.$bg.removeClass(a.settings.modifier),a.$overlay.removeClass(a.settings.modifier).hide(),a.$wrapper.hide(),f(),g(a,u.CLOSED,!0))}function j(a){var b,c,d,e,f={};for(a=a.replace(/\s*:\s*/g,":").replace(/\s*,\s*/g,","),b=a.split(","),e=0,c=b.length;e<c;e++)b[e]=b[e].split(":"),d=b[e][1],("string"==typeof d||d instanceof String)&&(d="true"===d||"false"!==d&&d),("string"==typeof d||d instanceof String)&&(d=isNaN(d)?d:+d),f[b[e][0]]=d;return f}function k(){for(var a=q,b=0;b<arguments.length;++b)a+="-"+arguments[b];return a}function l(){var a,c,d=location.hash.replace("#","");if(d){try{c=b('[data-remodal-id="'+d+'"]')}catch(e){}c&&c.length&&(a=b[p].lookup[c.data(p)],a&&a.settings.hashTracking&&a.open())}else n&&n.state===u.OPENED&&n.settings.hashTracking&&n.close()}function m(a,c){var d=b(document.body),e=d,f=this;f.settings=b.extend({},t,c),f.index=b[p].lookup.push(f)-1,f.state=u.CLOSED,f.$overlay=b("."+k("overlay")),null!==f.settings.appendTo&&f.settings.appendTo.length&&(e=b(f.settings.appendTo)),f.$overlay.length||(f.$overlay=b("<div>").addClass(k("overlay")+" "+k("is",u.CLOSED)).hide(),e.append(f.$overlay)),f.$bg=b("."+k("bg")).addClass(k("is",u.CLOSED)),f.$modal=a.addClass(q+" "+k("is-initialized")+" "+f.settings.modifier+" "+k("is",u.CLOSED)).attr("tabindex","-1"),f.$wrapper=b("<div>").addClass(k("wrapper")+" "+f.settings.modifier+" "+k("is",u.CLOSED)).hide().append(f.$modal),e.append(f.$wrapper),f.$wrapper.on("click."+q,'[data-remodal-action="close"]',function(a){a.preventDefault(),f.close()}),f.$wrapper.on("click."+q,'[data-remodal-action="cancel"]',function(a){a.preventDefault(),f.$modal.trigger(v.CANCELLATION),f.settings.closeOnCancel&&f.close(v.CANCELLATION)}),f.$wrapper.on("click."+q,'[data-remodal-action="confirm"]',function(a){a.preventDefault(),f.$modal.trigger(v.CONFIRMATION),f.settings.closeOnConfirm&&f.close(v.CONFIRMATION)}),f.$wrapper.on("click."+q,function(a){var c=b(a.target);c.hasClass(k("wrapper"))&&f.settings.closeOnOutsideClick&&f.close()})}var n,o,p="remodal",q=a.REMODAL_GLOBALS&&a.REMODAL_GLOBALS.NAMESPACE||p,r=b.map(["animationstart","webkitAnimationStart","MSAnimationStart","oAnimationStart"],function(a){return a+"."+q}).join(" "),s=b.map(["animationend","webkitAnimationEnd","MSAnimationEnd","oAnimationEnd"],function(a){return a+"."+q}).join(" "),t=b.extend({hashTracking:!0,closeOnConfirm:!0,closeOnCancel:!0,closeOnEscape:!0,closeOnOutsideClick:!0,modifier:"",appendTo:null},a.REMODAL_GLOBALS&&a.REMODAL_GLOBALS.DEFAULTS),u={CLOSING:"closing",CLOSED:"closed",OPENING:"opening",OPENED:"opened"},v={CONFIRMATION:"confirmation",CANCELLATION:"cancellation"},w=function(){var a=document.createElement("div").style;return void 0!==a.animationName||void 0!==a.WebkitAnimationName||void 0!==a.MozAnimationName||void 0!==a.msAnimationName||void 0!==a.OAnimationName}(),x=/iPad|iPhone|iPod/.test(navigator.platform);m.prototype.open=function(){var a,c=this;c.state!==u.OPENING&&c.state!==u.CLOSING&&(a=c.$modal.attr("data-remodal-id"),a&&c.settings.hashTracking&&(o=b(window).scrollTop(),location.hash=a),n&&n!==c&&i(n),n=c,e(),c.$bg.addClass(c.settings.modifier),c.$overlay.addClass(c.settings.modifier).show(),c.$wrapper.show().scrollTop(0),c.$modal.focus(),h(function(){g(c,u.OPENING)},function(){g(c,u.OPENED)},c))},m.prototype.close=function(a){var c=this;c.state!==u.OPENING&&c.state!==u.CLOSING&&c.state!==u.CLOSED&&(c.settings.hashTracking&&c.$modal.attr("data-remodal-id")===location.hash.substr(1)&&(location.hash="",b(window).scrollTop(o)),h(function(){g(c,u.CLOSING,!1,a)},function(){c.$bg.removeClass(c.settings.modifier),c.$overlay.removeClass(c.settings.modifier).hide(),c.$wrapper.hide(),f(),g(c,u.CLOSED,!1,a)},c))},m.prototype.getState=function(){return this.state},m.prototype.destroy=function(){var a,c=b[p].lookup;i(this),this.$wrapper.remove(),delete c[this.index],a=b.grep(c,function(a){return!!a}).length,0===a&&(this.$overlay.remove(),this.$bg.removeClass(k("is",u.CLOSING)+" "+k("is",u.OPENING)+" "+k("is",u.CLOSED)+" "+k("is",u.OPENED)))},b[p]={lookup:[]},b.fn[p]=function(a){var c,d;return this.each(function(e,f){d=b(f),null==d.data(p)?(c=new m(d,a),d.data(p,c.index),c.settings.hashTracking&&d.attr("data-remodal-id")===location.hash.substr(1)&&c.open()):c=b[p].lookup[d.data(p)]}),c},b(document).ready(function(){b(document).on("click","[data-remodal-target]",function(a){a.preventDefault();var c=a.currentTarget,d=c.getAttribute("data-remodal-target"),e=b('[data-remodal-id="'+d+'"]');b[p].lookup[e.data(p)].open()}),b(document).find("."+q).each(function(a,c){var d=b(c),e=d.data("remodal-options");e?("string"==typeof e||e instanceof String)&&(e=j(e)):e={},d[p](e)}),b(document).on("keydown."+q,function(a){n&&n.settings.closeOnEscape&&n.state===u.OPENED&&27===a.keyCode&&n.close()}),b(window).on("hashchange."+q,l)})});
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

/**
 * Created by Richard on 07/07/2017.
 */
/**
 * Created by Richard on 19/09/2016.
 */


//FidVids - uses custom selector because the youtube vid is lazy loaded so does not exist until modal is opened
//$("[data-fitvid]").fitVids({ customSelector: "iframe[data-youtube-iframe]"});

console.log('ACTIMBER BBD remodal1 new 1234');
ACTIMBER = {
    common: {
        init: function () {

            'use strict';
            //uncomment to debug
            console.log('common FIT VID 2 1234567');


            $('body').addClass('js');
            $("[data-fitvid]").fitVids();

            $('[data-control]').each(function () {
                var dataValue = $(this).attr('data-control');
                var showButton = $(this);
                var container = $(this).next('[data-container='+dataValue+']');
                ACTIMBER.fn.actStateToggle(container, showButton);
                console.log(container);
            });



        }
    },
    page: {
        init: function () {
            //uncomment to debug
            //console.log('pages');
        }
    },
    blog: {
        init: function () {
            //uncomment to debug
            console.log('blog');

            let currentTags = document.body.dataset.currentTags;
            let tagsArray = (currentTags == "") ? false : currentTags.split('|')
            let currentLocation = window.location.href;
            let currentPath = window.location.pathname;
            let pathArray = currentPath.split('/');
            let pathLastSection = pathArray[pathArray.length - 1];
            let pathFirstSection = currentPath.replace(String(pathLastSection), "");
            let pathUpdate = '';

            if(tagsArray != false ){

                //If filter clicked
                $(document).on('click', ".c-blog-filters__link", function (e) {

                    e.preventDefault();

                    //Get the filter tag
                    let clickedTag = this.dataset.tag;

                    //If tag is already sellected
                    if ( tagsArray.includes(clickedTag) ){

                        //remove the tag from the url path
                        pathLastSection = ACTIMBER.fn.removePlus(pathLastSection.replace(clickedTag, ""));

                        //if no tags selected
                        if(pathLastSection == ''){

                            //reset url to blog path
                            pathArray.pop();
                            pathArray.pop();

                            //update the url path
                            pathUpdate = pathArray.join('/')

                            //if there are tags
                        }
                        else{
                            //update the url path with latest tags
                            pathArray[pathArray.length - 1] = pathLastSection;
                            pathUpdate = pathArray.join('/')
                        }

                        //redirect to new tags
                        window.location.pathname = pathUpdate;

                        //If the tag was not already selected
                    }
                    else{
                        //add the tag to the current url and redirect

                        location.href = currentLocation + '+' + clickedTag;
                        console.log('clickedTag');
                        console.log(clickedTag);
                        console.log('tag added');
                    }


                } )
            }
        }
    },
   collection: {
        init: function () {
            //uncomment to debug
            //console.log('collection');


        }//end collection.init
    },
    collectionbundles:{
        init: function(){
            console.log('collection bundles timer');

            const bundledProducts = {};


            let elBundlenNoticeCurrentDiscount = document.getElementById('bundleNoticeTextCurrentDiscount');
            let elBundlenNoticeNextDiscount = document.getElementById('bundleNoticeTextNextDiscount');
            let elBundlenNoticeNextDiscountItem = document.getElementById('bundleNoticeTextNextDiscountItem');
            let elBundleNoticeTextCurrentSaving = $('#bundleNoticeTextCurrentSaving');
            let elBundleSaving = document.getElementById('bundleSaving');
            let elBundleDiscountCode = document.getElementById('bundleDiscountCode');
            let elBundlePrice =  document.getElementById('bundlePrice');
            let elOffPageBundleNoticeb = document.getElementById('offPageBundleNotice');
            let elCartBtn =$('.c-btn--buy-bundle');

            let bundleNoticeTextCurrentDiscount = elBundlenNoticeCurrentDiscount.textContent;
            let bundleNoticeTextNextDiscount = elBundlenNoticeNextDiscount.textContent;


            let bundleNoticeNoDiscount = "You don't have enough product in your bundle to get our bundle discount";
            let bundleNotice20Percent = "Add your bundle to the cart and get 20% off when you checkout";
            let bundleNotice25Percent = "Add your bundle to the cart and get 25% off when you checkout";
            let bundleNotice30Percent = "Add your bundle to the cart and get 30% off when you checkout";

            let bundlenNoticeNext0 = "Add 3 items to get our 20% bundle discount.";
            let bundlenNoticeNext1 = "Add 2 more items to get our 20% bundle discount.";
            let bundlenNoticeNext2 = "Add 1 more item to get our 20% bundle discount.";
            let bundlenNoticeNext3 = "Add 1 more items to get our 25% bundle discount.";
            let bundlenNoticeNext4 = "Add 2 more items to get our 30% bundle discount.";
            let bundlenNoticeNext5 = "Add 1 items to get our 30% bundle discount.";
            let bundlenNoticeNext6 = "";

            let bundleNoticeSaving1 = 'You will save ';
            let bundleNoticeSaving2 = 'when you use discount code';
            let bundleNoticeSaving3 = 'at checkout.';
            let discountCode1 = '3BIB20';
            let discountCode2 = '4BIB25';
            let discountCode3 = '6BIB30';




            let elTextQty = document.getElementById('bundleNoticeTextQty');
            let elTextUnit = document.getElementById('bundleNoticeTextUnitLabel');
            let textUnitSingle = 'item';
            let textUnit = 'items';
            let elBundleList = $('#bundleProductList');
            let bundleCount = 0;
            let bundleTotal = 0;
            let bundleDiscount = 0;
            let bundleDiscountPercent = 0;
            let bundleSaving = 0;
            let bundleSavingMoney = 0;

            // Create our number formatter.
            let formatter = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'GBP',
            });

            function bundleFormatSaving(){
                bundleSavingMoney = formatter.format(bundleSaving / 100);
            }


            function updateElBundleSaving() {
                elBundleSaving.textContent = bundleSavingMoney;
            }

            function updateElBundlePrice() {
                elBundlePrice.textContent = formatter.format((bundleTotal / 100) - (bundleDiscount / 100) );

            }

            function setBundleDiscount() {

                bundleDiscount = ((bundleTotal / 100) * bundleDiscountPercent);
            }

            function updateElBundleDiscountCode() {
                if(bundleCount == 3 ){
                    elBundleDiscountCode.textContent = discountCode1;
                }else if(bundleCount >3 && bundleCount <= 5){
                    elBundleDiscountCode.textContent = discountCode2;
                }else {
                    elBundleDiscountCode.textContent = discountCode3;
                }

            }




            function updateBundleNoticeSavingDisplay() {
                if (bundleCount >= 3){
                    elBundleNoticeTextCurrentSaving.show();
                }else{
                    elBundleNoticeTextCurrentSaving.hide()
                }
            }


            //update item text
            function updateItemtext(){
                if(bundleCount == 1){
                    elTextUnit.textContent = textUnitSingle;
                } else {
                    elTextUnit.textContent = textUnit;
                }

                elTextQty.textContent = bundleCount;
            }

            //update bundle notice text
            function updateBundleText(text, el) {
                el.textContent = text;
            }

            function updateBundleNotice() {
                if(bundleCount < 3){
                    elBundlenNoticeCurrentDiscount.textContent = bundleNoticeNoDiscount
                }else if(bundleCount == 3){
                    elBundlenNoticeCurrentDiscount.textContent = bundleNotice20Percent
                }else if(bundleCount > 3 && bundleCount <= 5){
                    elBundlenNoticeCurrentDiscount.textContent = bundleNotice25Percent
                }else{
                    elBundlenNoticeCurrentDiscount.textContent = bundleNotice30Percent
                }
            }

            function updateBundleNoticeNext() {
                let el = elBundlenNoticeNextDiscountItem;
                if(bundleCount == 0){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext0;
                }else if(bundleCount == 1){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext1;
                }else if(bundleCount == 2){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext2;
                }else if(bundleCount == 3){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext3;
                }else if(bundleCount == 4){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext4;
                }else if(bundleCount == 5){
                    showElement(el);

                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext5;
                }else if(bundleCount == 6){

                    hideElement(el)
                    elBundlenNoticeNextDiscount.textContent = bundlenNoticeNext6;
                }else{

                    hideElement(el)
                }

            }


            //update bundle list
            function updateBundleList(entries) {
                elBundleList.empty();

                for (const [product, obj] of entries) {

                    elBundleList.append('<div class="bundle-cart__item" id="bundleItem'+ obj.variantId +'" ><p>' + obj.productTitle + '<br><small>'+obj.variantTitle +' </small>' + '</p></div>');

                    $('#bundleItem' + obj.variantId).append('<input data-variant-id="'+ obj.variantId +'" class="bundle-item-qty" type=number min="0" value=' + obj.qty + '>')

                    bundleCountAdd(obj.qty);
                    bundleTotalAdd(obj.variantPrice * obj.qty);
                }

            }

            function setBundleDiscountPercent() {
                if (bundleCount < 3){
                    bundleDiscountPercent = 0
                } else if (bundleCount == 3){
                    bundleDiscountPercent = 20;
                }else if (bundleCount > 3 && bundleCount <= 50){
                    bundleDiscountPercent = 25;
                }else{
                    bundleDiscountPercent = 30;
                }

            }

            function updateBundleSaving() {
                bundleSaving = (bundleTotal / 100) * bundleDiscountPercent;
            }

            //update bundle qty
            function bundleCountAdd(qty){
                bundleCount = parseInt(bundleCount) + parseInt(qty);
            }

            //update bundle Total
            function bundleTotalAdd(price) {
                bundleTotal = parseInt(bundleTotal) + parseInt(price);
            }
            //add item to bundle
            function bundleAddItem(variantId, variantTitle, variantPrice, productTitle ){
                bundledProducts[variantId] =  bundledProducts[variantId] || {};
                bundledProducts[variantId].variantTitle = variantTitle;
                bundledProducts[variantId].variantId = variantId;
                bundledProducts[variantId].productTitle  = productTitle;
                bundledProducts[variantId].variantPrice  = variantPrice;
                if (bundledProducts[variantId].hasOwnProperty('qty')){
                    bundledProducts[variantId].qty  = bundledProducts[variantId].qty + 1;
                }else{
                    bundledProducts[variantId].qty  = 1;
                }

                //return bundledProducts
            }
            function closeDrawer(timer = 1000){
                window.setTimeout(function () {
                    elOffPageBundleNoticeb.classList.remove('is-open');
                }, timer);
            }

            closeDrawer(0);

            function toggleElementState(el, hideClass = 'is-hidden'){
                if (el.classList.contains(hideClass)) {
                    el.classList.remove(hideClass)
                }else{
                    el.classList.add(hideClass);
                }
            }

            function hideElement(el, hideClass = 'is-hidden'){

                    el.classList.add(hideClass);

            }

            function showElement(el, hideClass = 'is-hidden'){

                el.classList.remove(hideClass);

            }

            function updateElCartBtn(){
                if(bundleCount > 2){
                    $(elCartBtn).prop("disabled", false)
                }else{
                    $(elCartBtn).prop("disabled", true)
                }
            }



            $(document).on('click', '.l-off-page__tab', function(){
                console.log('tab clicked class added')
                elOffPageBundleNoticeb.classList.add('is-open');
            });

            $(document).on('click', '.is-open .l-off-page__tab', function(){
                console.log('tab clicked class added')
                elOffPageBundleNoticeb.classList.remove('is-open');
            });

            $(document).on('click', '.l-off-page__close', function(){
                console.log('tab clicked class added')
                elOffPageBundleNoticeb.classList.remove('is-open');
                //elOffPageBundleNoticeb.classList.add('is-close-quick');
            });

            // $(document).on('mouseover', '.l-off-page__tab', function(){
            //     console.log('tab hovered')
            //     elOffPageBundleNoticeb.classList.add('is-open');
            //     //elOffPageBundleNoticeb.classList.remove('is-close-quick');
            // });





            // Add a new item to the bundle
            $('.product-form').submit(function (e) {
                e.preventDefault();
                elOffPageBundleNoticeb.classList.remove('is-close-quick');
                elOffPageBundleNoticeb.classList.add('is-open');
                closeDrawer(4000);

                bundleCount = 0;
                bundleTotal = 0;
                bundleDiscountPercent = 0;

                let productId = $('input[name=productId]',this).val();
                let productTitle = $('input[name=productTitle]',this).val();
                let variantId = $('option:selected',this).val();
                let variantTitle = $('option:selected',this).text().trim();
                let variantPrice = $('option:selected', this).attr('data-variant-price');

                console.log('variantPrice');
                console.log(variantPrice);

                bundleAddItem(variantId, variantTitle, variantPrice, productTitle )

                const entries = Object.entries(bundledProducts);

                updateBundleList(entries);

                updateItemtext();

                setBundleDiscountPercent();

                updateBundleSaving()

                bundleFormatSaving();

                updateBundleNotice();
                updateBundleNoticeNext()
                updateBundleNoticeSavingDisplay();
                updateElBundleSaving();
                updateElBundleDiscountCode();
                setBundleDiscount();
                updateElBundlePrice()

                updateElCartBtn();


            });



            $(document).on('click', '#AddBundleToCartHeader, #AddBundleToCartFooter, #AddBundleToCartOffPage', function () {
                let entries = Object.entries(bundledProducts);
                let values = {};

                console.log('#AddBundleToCartHeader jQuery post updates')

                for (const [product, obj] of entries) {
                    values[obj.variantId] = obj.qty;
                }

                $.ajax({
                    type: "POST",
                    url: '/cart/update.js',
                    data: {updates: values},
                    dataType: 'json',
                    success: function () {
                        window.location.href = "https://bibado.co.uk/cart";
                    },
                    error: function () {
                      console.log('we have and error');
                    }
                });

            })

            //on update bundle item quantity
            $(document).on('change', '.bundle-item-qty', function(e){



                bundleCount = 0;

                let varId = $(this).attr('data-variant-id');
                let varQty = parseInt($(this).val());
                bundledProducts[varId].qty = varQty;
                // console.log('bundledProducts[varId].qty');
                // console.log(bundledProducts[varId].qty);

                const entries = Object.entries(bundledProducts);
                for (const [product, obj] of entries) {
                    bundleCountAdd(obj.qty);
                }

                updateItemtext();

                setBundleDiscountPercent();

                updateBundleSaving()

                bundleFormatSaving();

                updateBundleNotice();
                updateBundleNoticeNext()
                updateBundleNoticeSavingDisplay();
                updateElBundleSaving();
                updateElBundleDiscountCode();
                setBundleDiscount();
                updateElBundlePrice();

                updateElCartBtn();

            })
        },
},
    product: {
        init: function () {
            //uncomment to debug
            //console.log('collection');

        }
    },
    cart: {
        init: function () {
            //uncomment to debug
            console.log('cart template');
        }

    },
    var: {
        locale: ''
    },
    fn:{
        removePlus: function (myUrl){
            if (myUrl.substring(myUrl.length-1) == "+")
            {
                myUrl = myUrl.substring(0, myUrl.length-1);
            }

            myUrl = myUrl.replace('++', '+');

            myUrl = (myUrl[0] == '+')? myUrl.substr(1) : myUrl;


            return myUrl;
        },
        locale: function (local) {

            if(local === undefined)
            {
                return ACTIMBER.var.locale
            }else{
                ACTIMBER.var.locale = local;
                return ACTIMBER.var.locale;
            }

        },
        actStateToggle: function (container, showButton, parent, listParent) {
            var elState = showButton.attr('data-state');
            var eventActOpen = new Event('actOpen');
            var eventActClose = new Event('actClose');
            showButton.on('click', function(e){
                e.preventDefault();
                elState = $(this).attr('data-state');
                if ('off' === elState ) {
                    console.log('click on');
                    $(this).attr('data-state', 'on');
                    $(container).attr('data-state', 'on');
                    $(parent).attr('data-state', 'on');
                    $(container).addClass('ac-on');
                    document.body.className += ' ' + 'container-is-open';
                    window.dispatchEvent(eventActOpen);

                } else {
                    console.log('click off');
                    $(this).attr('data-state', 'off');
                    $(container).attr('data-state', 'off');
                    $(parent).attr('data-state', 'off');
                    $(container).removeClass('ac-on');
                    document.querySelector('body').classList.remove('container-is-open');

                    window.dispatchEvent(eventActClose);
                }
            });
        },

        defer: function(successMethod, failMethod, testMethod, pause, attempts) {
            var defTest = function () {
                return $('#ISR_popup_container').length == 1
            };
            var  defFail = function () {
                $( "#ISR_button" ).click();
                console.log('deft clicking it');
            }
            var  defSuccess = function () {
                Cookies.remove('openStockReminder');
                console.log('return def success');;
            }
            attempts = (attempts == 'undefined')? false : attempts;
            pause = (pause == 'undefined')? 50 : pause;
            testMethod = (testMethod == 'undefined')? defTest : testMethod;
            failMethod = (failMethod == 'undefined')? defFail : failMethod;
            successMethod = (successMethod == 'undefined')? defSuccess : successMethod;


            if (testMethod()) {
                defSuccess();
            } else {
                failMethod();
                if(attempts === false || attempts > 0) {
                    setTimeout(function () {
                        attempts = (attempts === false )? attempts : attempts = attempts - 1;
                        ACTIMBER.fn.defer(successMethod, failMethod, testMethod, pause, attempts)
                    }, pause);
                }
            }
        }
    },

};

UTIL = {
    exec: function (template, handle) {
        var ns = ACTIMBER,
            handle = (handle === undefined) ? "init" : handle;

        if (template !== '' && ns[template] && typeof ns[template][handle] === 'function') {
            ns[template][handle]();
        }
    },
    init: function () {
        var body = document.body,
            template = body.getAttribute('data-template'),
            handle = body.getAttribute('data-handle');

        UTIL.exec('common');
        UTIL.exec(template);
        UTIL.exec(template, handle);
    }
};
$(window).on('load',UTIL.init);
