{% comment %}
  Updated: 2019/12/16
{% endcomment %}

{% unless upsellapp_included == true %}

{% capture upsell_cart_includes %}
  {% assign upsellapp_tags = shop.metafields.smartmarketer.upsellapp_tags | downcase | split: ',' %}
  {% assign skip_cart = shop.metafields.smartmarketer.upsellapp_skip_cart %}
  {% assign amazon_pay = shop.metafields.smartmarketer.upsellapp_amazon_pay %}
  {% if shop.metafields.subscriptions.subscription_active == 'true' %}
    {% assign subscription_app_enabled = true %}
    {% if shop.metafields.smartmarketer.upsellapp_with_recharge == 'true' %}
      {% assign integrate_with_recharge = 'true' %}
    {% else %}
      {% assign integrate_with_recharge = 'false' %}
    {% endif %}
  {% else %}
    {% assign subscription_app_enabled = false %}
  {% endif %}
  {% assign product_tags = '' | split: ',' %}
  {% assign subscription_products = '' | split: ',' %}
  {% assign cart_products = '' | split: ',' %}
  {% assign all_cart_collections = '' | split: ',' %}
  {% assign customer_id = '"' | append: customer.id | append: '"' %}
  {% assign needed_product_fields_names = 'id,title,handle,featured_image,tags,vendor,type,published_at' | split: ',' %}
  {% assign needed_variant_fields_names = 'id,title,price,taxable,weight,requires_shipping,inventory_policy,inventory_quantity,inventory_management,sku,compare_at_price' | split: ',' %}
  {% assign needed_collection_fields_names = 'id,title,handle' | split: ',' %}
  {% for cart_item in cart.items %}
    {% assign product_variants_json_list = '' | split: ',' %}
    {% for product_variant in cart_item.product.variants %}
      {% assign product_variant_json = '' | split: ',' %}
      {% for variant_field_name in needed_variant_fields_names %}
        {% assign variant_field_value = product_variant[variant_field_name] | json %}
        {% assign variant_field_json = '"' | append: variant_field_name | append: '":' | append: variant_field_value | split: '---upsellapp_separator---' %}
        {% assign product_variant_json = product_variant_json | concat: variant_field_json %}
      {% endfor %}
      {% assign product_variant_json = product_variant_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
      {% assign product_variants_json_list = product_variants_json_list | concat: product_variant_json %}
    {% endfor %}
    {% assign product_variants_json_list = product_variants_json_list | join: ',' | prepend: '[' | append: ']' %}
    {% assign product_json = '' | split: ',' %}
    {% for product_field_name in needed_product_fields_names %}
      {% assign product_field_value = cart_item.product[product_field_name] | json %}
      {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
      {% assign product_json = product_json | concat: product_field_json %}
    {% endfor %}
    {% assign product_field_name = 'collection_ids' %}
    {% assign product_field_value = cart_item.product.collections | map: 'id' | join: ',' | json  %}
    {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
    {% assign product_json = product_json | concat: product_field_json %}
    {% assign product_field_name = 'variants' %}
    {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_variants_json_list | split: '---upsellapp_separator---' %}
    {% assign product_json = product_json | concat: product_field_json %}
    {% assign product_json = product_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
    {% assign product_tags = product_tags | concat: cart_item.product.tags %}
    {% assign cart_products = cart_products | concat: product_json %}
    {% assign all_cart_collections = all_cart_collections | concat: cart_item.product.collections %}
    {% assign cart_item_id = '' | append: cart_item.id %}
    {% if subscription_app_enabled %}
        {% for p in cart_item.properties %}
          {% if p.first == 'shipping_interval_frequency' %}
            {% assign subscription_product = all_products[cart_item.product.metafields.subscriptions.original_handle] %}
            {% if subscription_product %}
              {% assign product_tags = product_tags | concat: subscription_product.tags %}
              {% for subscription_variant in subscription_product.variants %}
                {% if subscription_variant.metafields.subscriptions.discount_variant_id == cart_item_id  %}
                  {% assign subscription_product_relation = cart_item.product_id | append: '_' | append: subscription_product.id | split: ','  %}
                  {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endif %}
        {% endfor %}
    {% endif %}
  {% endfor %}
  {% if template.name == 'product' %}
    {% assign product_id_size = '' | append: product.id | strip | size %}
    {% if product_id_size > 0 %}
      {% assign product_variants_json_list = '' | split: ',' %}
      {% for product_variant in product.variants %}
        {% assign product_variant_json = '' | split: ',' %}
        {% for variant_field_name in needed_variant_fields_names %}
          {% assign variant_field_value = product_variant[variant_field_name] | json %}
          {% assign variant_field_json = '"' | append: variant_field_name | append: '":' | append: variant_field_value | split: '---upsellapp_separator---' %}
          {% assign product_variant_json = product_variant_json | concat: variant_field_json %}
        {% endfor %}
        {% assign product_variant_json = product_variant_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
        {% assign product_variants_json_list = product_variants_json_list | concat: product_variant_json %}
      {% endfor %}
      {% assign product_variants_json_list = product_variants_json_list | join: ',' | prepend: '[' | append: ']' %}
      {% assign product_json = '' | split: ',' %}
      {% for product_field_name in needed_product_fields_names %}
        {% assign product_field_value = product[product_field_name] | json %}
        {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
        {% assign product_json = product_json | concat: product_field_json %}
      {% endfor %}
      {% assign product_field_name = 'collection_ids' %}
      {% assign product_field_value = product.collections | map: 'id' | join: ',' | json  %}
      {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_field_value | split: '---upsellapp_separator---' %}
      {% assign product_json = product_json | concat: product_field_json %}
      {% assign product_field_name = 'variants' %}
      {% assign product_field_json = '"' | append: product_field_name | append: '":' | append: product_variants_json_list | split: '---upsellapp_separator---' %}
      {% assign product_json = product_json | concat: product_field_json %}
      {% assign product_json = product_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
      {% assign product_tags = product_tags | concat: product.tags %}
      {% assign cart_products = cart_products | concat: product_json %}
      {% assign all_cart_collections = all_cart_collections | concat: product.collections %}
      {% if subscription_app_enabled and product.metafields.subscriptions.subscription_id %}
        {% assign subscription_product_relation = product.metafields.subscriptions.discount_product_id | append: '_' | append: product.id | split: ','  %}
        {% assign subscription_products = subscription_products | concat: subscription_product_relation %}
      {% endif %}
    {% endif %}
  {% endif %}
  {% assign cart_collections = '' | split: ',' %}
  {% for cart_collection in all_cart_collections %}
    {% assign cart_collection_json = '' | split: ',' %}
    {% for collection_field_name in needed_collection_fields_names %}
      {% assign collection_field_value = cart_collection[collection_field_name] | json %}
      {% assign collection_field_json = '"' | append: collection_field_name | append: '":' | append: collection_field_value | split: '---upsellapp_separator---' %}
      {% assign cart_collection_json = cart_collection_json | concat: collection_field_json %}
    {% endfor %}
    {% assign collection_rules_size = cart_collection | json | split: '"rules":' | size %}
    {% assign collection_field_name = 'collection_type' %}
    {% assign collection_field_value = 'custom' | json %}
    {% if collection_rules_size > 1 %}
      {% assign collection_field_value = 'smart' | json %}
    {% endif %}
    {% assign collection_field_json = '"' | append: collection_field_name | append: '":' | append: collection_field_value | split: '---upsellapp_separator---' %}
    {% assign cart_collection_json = cart_collection_json | concat: collection_field_json %}
    {% assign cart_collection_json = cart_collection_json | join: ',' | prepend: '{' | append: '}' | split: '---upsellapp_separator---' %}
    {% assign cart_collections = cart_collections | concat: cart_collection_json %}
  {% endfor %}
  {% assign product_tags = product_tags | uniq %}
  {% assign upsell_cart_include_upsells = 'false' %}
  {% assign disabled_by_subscription_app = 'false' %}
  {% if subscription_app_enabled and subscription_products.size > 0 and integrate_with_recharge != 'true' %}
	  {% assign disabled_by_subscription_app = 'true' %}
  {% endif %}
  {% for tag_raw in product_tags %}
    {% assign tag = tag_raw | downcase %}
    {% if upsellapp_tags contains tag %}
      {% assign upsell_cart_include_upsells = 'true' %}
    {% endif %}
  {% endfor %}
  {% assign subscription_products_json = subscription_products | uniq | join: ',' %}
  {% assign cart_products_json = cart_products | uniq | join: ',' %}
  {% assign cart_collections_json = cart_collections | uniq | join: ',' %}

  {% assign cart_variants_json = '' %}
  {% for item in cart.items %}
  {% assign cart_item = item | json | append: ',' %}
    {% assign cart_variants_json = cart_variants_json | append: cart_item %}
  {% endfor %}
{% endcapture %}
<style>.ocu-hidden.ocu-hidden.ocu-hidden{display:none !important}</style>
<script>
    (function(ELEMENT) {
        ELEMENT.matches = ELEMENT.matches || ELEMENT.mozMatchesSelector || ELEMENT.msMatchesSelector || ELEMENT.oMatchesSelector || ELEMENT.webkitMatchesSelector;
        ELEMENT.closest = ELEMENT.closest || function closest(selector) {
            if (!this) return null;
            if (this.matches(selector)) return this;
            if (!this.parentElement) {return null}
            else return this.parentElement.closest(selector)
          };
    }(Element.prototype));
    var oneClickUpsellGetCheckoutUrl, oneClickUpsellHandlePermalink;

  (function() {
    var utils={cookie:{options:{expires:86400,path:"/",encodeValue:!1},get:function(e){var o=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return o?decodeURIComponent(o[1]):void 0},set:function(e,o,t){var n=(t=t||{}).expires;if("number"==typeof n&&n){var r=new Date;r.setTime(r.getTime()+1e3*n),n=t.expires=r}n&&n.toUTCString&&(t.expires=n.toUTCString());var i=e+"="+(o=encodeURIComponent(o));for(var c in t){i+="; "+c;var a=t[c];!0!==a&&(i+="="+a)}document.cookie=i},remove:function(e){utils.cookie.set(e,null,{expires:-1})}},queryParams:function(e){var o={};return e.replace("?","").split("&").forEach(function(e){var t=e.split("=")[0],n=e.split("=")[1];o[t]=decodeURIComponent(n)}),o}};
    var lqd = {
        template_name: '{{ template.name }}',
        shop_currency: '{{ shop.currency }}',
        upsell_cart_include_upsells: {{ upsell_cart_include_upsells }},
        skip_cart: '{{ skip_cart }}' === 'true',
        disabled_by_subscription_app: {{ disabled_by_subscription_app }},
        integrate_with_recharge: '{{ integrate_with_recharge }}' === 'true',
        subscription_products_json: '{{ subscription_products_json }}',
        cart_products_json: JSON.parse({{ cart_products_json | prepend: '[' | append: ']' | json }}),
        cart_collections_json: [{{ cart_collections_json }}],
        cart_variants_json: [{{ cart_variants_json }}],
        customer_id: {{ customer_id }},
        customer: {
            id: {{ customer_id }},
            email: '{{customer.email}}'
        },
        proxy_url: '{{ shop.metafields.smartmarketer.upsellapp_proxy_url }}',
        proxy_url_default: '/apps/secure-checkout',
        permanent_domain: '{{ shop.permanent_domain }}',
        current_domain: '{{ request.host }}',
        subscription_products_size: {{ subscription_products.size }},
        product: {{ product | json }},
        amazon_pay: '{{ amazon_pay }}' === 'true',
        themePopup: '{{ settings.cross_sell }}' === 'true' || '{{ settings.upsell_popup_enable }}' === 'true',
        themeSkipCart: '{{ settings.cart_action }}' === 'redirect_checkout'
            || '{{ settings.enable_product_cart_skip }}' === 'true'
            || '{{settings.atc_cart_style }}' === 'skip_cart',

        get isThemePopupTag() {
            return this.product && this.product.tags.some(function(tag) {
                return /cross-sell-\d/.test(tag);
            });
        },
        get isSkipCartPage() {
            return /index|collection|product/.test(this.template_name);
        },
        get isSkipCartCondition() {
            return (this.skip_cart || this.themeSkipCart) && this.isSkipCartPage && !this.isThemePopupTag;
        }

    };

    lqd.cart_products_json = lqd.cart_products_json.filter(function(item) { return item.handle; });

    (function getShareableDiscount() {
        var params = utils.queryParams(location.search);
        var discount = params.discount;
        if (!discount) return;
        utils.cookie.set('ocu-share-discount', discount, utils.cookie.options);
        //history.pushState(null, null, location.href.replace(/\?.+/, ''));
    })();

    var ocuCallback = function(jQ) {
        initSkipCart();
        initBuyNow();

        var upsellCheckoutButtonSelectors = "[name='checkout'], [href^='/checkout'], form[action='/checkout'] [type='submit'], #checkout, [name='goto_pp'], .checkout_button, button:contains('Checkout')";
        var checkoutParams = '';
        var checkoutParamsArray = [];
        var requirePayPal = false;
        var redirectTimeout = 8000;
        var docArticle = jQ(upsellCheckoutButtonSelectors)[0];
        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
        var checkoutButtonState = false;
        var buyNowClicked;
        var SMAR7Integration;
        var amazonPayInitiated;
        var isSwellInstalled = false;
        var redirect_url;
        var permalink = /cart\/(\d+:\d+(?:,\d+:\d+)*)(?:[?&]discount=([-\w! %205]+))*/;
        var needPreventRedirect = function(target) {
            var condition = target.dataset.type === 'crm_dest'
                || target.dataset.zpProductRedirectLink === ''
                || target.closest('[data-type="crm_dest"]')
                || target.closest('[data-zp-product-redirect-link]');

            if (condition) return true;
        }

        // document.evaluate(
        //     '//style[contains(text(), "swell")]',
        //     document,
        //     null,
        //     XPathResult.FIRST_ORDERED_NODE_TYPE,
        //     null
        // ).singleNodeValue;

        oneClickUpsellGetCheckoutUrl = {
            init: function() {
                this.def = jQ.Deferred();

                return this.create.bind(this);
            },

            create: function(config) {
                if (config === 'skip_cart') return jQ.Deferred().resolve(lqd.skip_cart);

                this.prepare(config);
                this.verify();

                return this.config.redirect
                    ? this.def.promise().done(this.redirect)
                    : this.def.promise();
            },

            prepare: function(config) {
                this.config = config || {};
                this.config.button && checkPayPal(jQ(this.config.button));
                this.config.params && this.params();
                integrationWithOtherApps();
                buildCheckoutParams();
                checkoutParams = checkoutParams ? '?' + checkoutParams : '';
            },

            verify: function() {
                // if (window.swellAPI) {
                //     var balance = swellAPI.getCustomerDetails().pointsBalance;
                //     if (balance) return redirectToCheckout();
                // }
                ocuVerifyCurrentCartData()
                    .then(ocuSaveCart)
                    .then(ocuGetCart)
                    .then(function(res) {
                        ocuVerifyUpsellsApi(res).then(this.resolve.bind(this)).catch(this.resolve.bind(this));
                    }.bind(this))
                    .catch(this.resolve.bind(this));
            },

            resolve: function(res) {
                this.def.resolve(this.build(res));
            },

            build: function(res) {
                var enabled = res.status && !/\d+/.test(res.status);

                return {
                    status: enabled,
                        checkout_url: (enabled ? res.checkout_url : '/checkout') + checkoutParams,
                        skip_cart: lqd.skip_cart,
                        redirect_url: res.redirect_url || redirect_url
                };
            },

            params: function() {
                this.config.params
                    .map(function(param) {
                        return Object.keys(param).map(function(key) {
                            return {
                                name: encodeURIComponent(key),
                                value: key === 'discount' ? param[key] : encodeURIComponent(param[key])
                            };
                        })[0];
                    })
                    .forEach(function(param) {
                        checkoutParamsArray.push(param);
                    });
            },

            redirect: function(res) {
                location = lqd.integrate_with_recharge ? res.checkout_url : res.redirect_url || res.checkout_url;
            }

        }.init();

        oneClickUpsellHandlePermalink = handleCartAddLink;

        function handleDocumentClick(e) {
            if (lqd.template_name === 'page' && !e.isTrusted) return;
            if (!lqd.amazon_pay && e.target.closest('form[action^="https://payments.amazon"]')) return;
            if (needPreventRedirect(e.target)) return;

            if ((e.target.dataset.skipCart === 'true' || e.target.closest('[data-skip-cart]')) && submitted) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
            }

            if (e.target.dataset.ocuCheckoutLink || e.target.closest('[data-ocu-checkout-link]')) {
                e.preventDefault();
                var href = (e.target.dataset.ocuCheckoutLink ? e.target : e.target.closest('[data-ocu-checkout-link]')).href;
                var result = handleCartAddLink(href, 'redirect');
                return result.promise.then(result.callback);
            }

            if (e.target.dataset.customBuyNow) {
                e.preventDefault();
                e.stopPropagation();

                var id = e.target.dataset.varientId;
                var qty = e.target.dataset.itemQuantity;
                var data = { id: id, quantity: qty };
                var onSuccess = function() { oneClickUpsellGetCheckoutUrl({ redirect:true }) };

                jQ.ajax({
                    type: 'POST',
                    url: '/cart/add.js',
                    dataType: 'json',
                    data: data,
                    success: onSuccess
                });
            }

            var isBoldInstalled = window.BOLD && BOLD.apps_installed;
            var boldProductOptions = isBoldInstalled && BOLD.apps_installed['Product Options'];
            var boldUpsell = isBoldInstalled && BOLD.apps_installed['Product Upsell'];

            if (
                e.target.dataset.testid === 'Checkout-button'
                && (e.target.closest('form[action="/cart/add"]') || document.querySelector('form[action="/cart/add"]'))
            ) {

                var button = e.target;
                var form = e.target.closest('form[action="/cart/add"]');
                if (!form) {
                    form = document.querySelector('form[action="/cart/add"]');
                    if (!form.elements.id) return;
                    form.elements.id.disabled = false;
                }

                e.preventDefault();
                e.stopPropagation();
                buyNowClicked = true;

                return addToCart(form, button);
            }

            if (e.target.name === 'update' || e.target.closest('form[action="/cart/add"]') || buyNowClicked) return;

            var isInclude = Array.prototype.some.call(jQ(upsellCheckoutButtonSelectors), function(el) {
                return el === e.target || e.target.dataset.ocuCheckout === 'true';
            });

            var parent = !isInclude
                && (e.target.closest('[data-ocu-checkout]')
                || !e.target.closest('.cart_content') && e.target.closest('form[action="/checkout"] [type="submit"]')
                || lqd.template_name === 'cart' && e.target.closest('form[action="/cart"] [type="submit"]'))
                || e.target.closest('[name="checkout"]');

            if (e.target.closest('form[action^="https://payments.amazon"]')) {
                e.preventDefault();
                e.stopPropagation();

                var form = e.target.closest('form[action^="https://payments.amazon"]');
                var path = {
                    ocu: lqd.proxy_url + '/amazon/forward',
                    shopify: form.querySelector('[name="redirectURL"]').value
                };

                return oneClickUpsellGetCheckoutUrl()
                     .then(function(res) {
                          var reg = new RegExp(lqd.proxy_url + '\\/(.+)\\??');
                          var match = reg.exec(res.checkout_url);
                          var token = match && match[1];
                          utils.cookie.set('ocu_checkout_token', token, utils.cookie.options);
                      })
                      .catch(function(res) { location = path.shopify });
            }

            if (!isInclude && !parent) return;

            e.preventDefault();

            var isIPhone = /iPhone/.test(navigator.userAgent);
            if ((boldUpsell || boldProductOptions) && (e.isTrusted || isIPhone)) {
                var t = setTimeout(function() {
                    var boldModal = document.querySelector('#bold-upsell-modal-window');
                    if (boldModal && boldUpsell) return;
                    upsellsCheckoutRedirect(e);
                }, 3000);
                return;
            }

            clearTimeout(t);
            upsellsCheckoutRedirect(e);
        }

        function handleCartAddLink(url, redirect) {
            var match = permalink.exec(url);
            var cfg = { redirect: redirect };

            if (!match) return {
                promise: jQ.Deferred().resolve({ checkout_url: url }),
                callback: function(res) {
                    return redirect ? location.assign(url) : jQ.Deferred().resolve(res)
                }
            };

            var discount = match[2];
            if (discount) cfg.params = [{ discount: discount }];

            var groups = match[1].split(',');

            var data = groups.reduce(function(acc, item, i, arr) {
                var id = +item.split(':')[0];
                var qty = +item.split(':')[1];

                var cartItem = lqd.cart_variants_json.filter(function(item) { return item.id === id })[0];
                if (cartItem) qty += cartItem.quantity;

                if (acc) acc += '&';
                return acc += 'updates[' + id + ']=' + qty;
            }, '');

            var params = {
                type: 'POST',
                url: '/cart/update.js',
                data: data,
                dataType: 'json'
            };

            return {
                promise: jQ.ajax(params),
                callback: function() { return oneClickUpsellGetCheckoutUrl(cfg); }
            };
        }

        {% if upsell_cart_include_upsells == 'true' and template.name != 'cart' %}
          if (isSwellInstalled) swellIntegration();
          var documentMutationObserver = new MutationObserver(function(mutations) {
              mutations.forEach(function(mutation) {
                  if (
                      mutation.type === 'attributes'
                      && mutation.target === docArticle
                      || /cart-?(popup|container)/i.test(mutation.target.id)
                      || /bold-upsell-modal-window/.test(mutation.target.id)
                    ) {
                      if (mutation.target.id === 'bold-upsell-modal-window') {
                          return handleBoldUpsellPopupButtons(mutation.target);
                      }

                      var checkoutButton = jQ(upsellCheckoutButtonSelectors);
                      var dataOcuCheckoutValue = checkoutButton.attr('data-ocu-checkout');
                      var dataDisableRechargeValue = checkoutButton.attr('data-disable-recharge');

                      jQ("button:contains('Checkout')").removeAttr("onclick"); // Integration with AceCase store

                      if (!dataOcuCheckoutValue) { // Integration with MyDietChief store
                          checkoutButton.attr('data-ocu-checkout', true);
                      }

                      {% if disabled_by_subscription_app == 'false' %}
                      if (!dataDisableRechargeValue) {
                          checkoutButton.attr('data-disable-recharge', true);
                          jQ('body').on('click', upsellCheckoutButtonSelectors, upsellsCheckoutRedirect);

                          var cartPopupBtn = document.querySelector('.bkt--upsell-target-checkout');
                          var form = mutation.target.querySelector('form[action="/cart"]');
                          var btn = form && form.querySelector('input[type="submit"]');
                          if (cartPopupBtn) handleCartPopup(cartPopupBtn);
                          if (btn) handleCartDrawer(btn);

                          var checkoutLinks = document.querySelectorAll('a[href="/checkout"]');
                          Array.prototype.forEach.call(checkoutLinks, function(link) {
                              if (!link) return;
                              link.addEventListener('click', function(e) {
                                  e.stopPropagation();
                                  e.preventDefault();
                                  oneClickUpsellGetCheckoutUrl({redirect:true});
                              });
                          });
                      }
                      {% endif %}
                    }
                });
            });

        if (!/trident|edge/i.test(navigator.userAgent)) {
            documentMutationObserver.observe(document, {
                childList: true,
                subtree: true,
                attributes: true
            });
        }

        var _SyncQtyFields = {
            init: function() {
                if (this.fields.length < 2) return;
                if (!this.controls.length) return;
                this.listenEvents();
            },
            get controls() {
                return document.querySelectorAll('[data-func]');
            },
            get fields() {
                return document.querySelectorAll('[name="updates[]"]');
            },
            getArray: function(nodeList) {
                return Array.prototype.slice.call(nodeList);
            },
            getTarget: function(el) {
                return el.closest('form').querySelector('[name="updates[]"]');
            },
            getQty: function(el) {
                return el ? el.value : 1;
            },
            update: function(target) {
                this.getArray(this.fields).forEach(function(el) {
                    el.value = this.getQty(target);
                }.bind(this));
            },
            handle: function(e) {
                var target = this.getTarget(e.target);
                setTimeout(function() { this.update(target); }.bind(this));
            },
            listenEvents: function() {
                this.getArray(this.controls).forEach(function(el) {
                    el.addEventListener('click', this.handle.bind(this));
                }.bind(this));
            }
        };

        function handleBoldUpsellPopupButtons(target) {
            var modalButtons = [
                target.querySelector('[data-bold-component-id="upsell_continue"]'),
                target.querySelector('[data-bold-component-id="upsell_no_thanks"]'),
                target.querySelector('#bold-modal__btn-close')
            ];

            modalButtons.forEach(function(item) {
                if (!item) return;
                item.addEventListener('click', function(e) {
                    setTimeout(function() {
                         if (
                          (lqd.skip_cart || lqd.themeSkipCart) && lqd.template_name === 'product'
                          || lqd.template_name === 'cart'
                        ) {
                            oneClickUpsellGetCheckoutUrl({ redirect:true });
                        }

                    }, 500);
                });
            });
        }

        function handleCartPopup(btn, clone, cfg) {
            cfg = cfg || {
                tag: 'input ',
                type: 'type="button" ',
                style: 'style="position:absolute;left:0;top:0;width:100%;height:100%;cursor:pointer;opacity:0" ',
                data: 'data-ocu-dialog-btn '
            };

            btn.style.position = 'relative';
            btn.insertAdjacentHTML('beforeend','<'+cfg.tag+cfg.type+cfg.style+cfg.data+'>');

            clone = clone || document.querySelector('[data-ocu-dialog-btn]');
            clone.addEventListener('click', function(e) {
                e.stopPropagation();
                btn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="bkt--nc-icon" x="0px" y="0px" width="64px" height="15px" viewBox="0 0 64 64"><g><circle class="nc-dots-7-2" data-color="color-2" fill="#445FFF" cx="32" cy="32" r="26" transform="translate(6.26687999999989 6.26687999999989) scale(0.8041600000000034)" style="opacity:0.8041600000000034"></circle><circle class="nc-dots-7-1" fill="#445FFF" cx="-72" cy="32" r="26" transform="translate(3.2332800000000272 12.933120000000109) scale(0.5958399999999966)" style="opacity:0.5958399999999966"></circle><circle class="nc-dots-7-3" fill="#445FFF" cx="132" cy="32" r="26" transform="translate(33.6 19.2) scale(0.4)" style="opacity:0.4"></circle></g></svg>';
                function setAttributes(e,t){for(var i in t)e.setAttribute(i,t[i])}function dotsSevenStep(e){startDots7||(startDots7=e);var t=e-startDots7,n=Math.min(t/250,4);n=4==n?0:n,decimalRot=n%1,upperInteger=Math.ceil(n),1e3>t||(startDots7+=1e3);if(circleDots7[0][0]){window.requestAnimationFrame(dotsSevenStep);var a=[],r=[],o=[],s=[-72,32,132],c=[32,32,32];for(j = 0;  circleDots7Number > j ; j++) {for(a[0]=a[1]=a[2]=.4,1==upperInteger?(a[0]=1-3*decimalRot/5,a[1]=.4+3*decimalRot/5):2==upperInteger?(a[1]=1-3*decimalRot/5,a[2]=.4+3*decimalRot/5):3==upperInteger?(a[1]=.4+3*decimalRot/5,a[2]=1-3*decimalRot/5):4==upperInteger?(a[0]=.4+3*decimalRot/5,a[1]=1-3*decimalRot/5):a[0]=1,i=0;3>i;i++)r[i]=(1-a[i])*s[i],o[i]=(1-a[i])*c[i],setAttributes(circleDots7[i][j],{transform:"translate("+r[i]+" "+o[i]+") scale("+a[i]+")",style:"opacity:"+a[i]+";"})}}}!function(){var e=0;window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var i=(new Date).getTime(),n=Math.max(0,16-(i-e)),a=window.setTimeout(function(){t(i+n)},n);return e=i+n,a})}();var circleDots7=[],startDots7=null;circleDots7[0]=document.getElementsByClassName("nc-dots-7-1"),circleDots7[1]=document.getElementsByClassName("nc-dots-7-2"),circleDots7[2]=document.getElementsByClassName("nc-dots-7-3"),circleDots7Number = circleDots7[0].length,window.requestAnimationFrame(dotsSevenStep);
                oneClickUpsellGetCheckoutUrl({redirect:true});
            });
        }

        function handleCartDrawer(btn) {
            btn.type = 'button';
            btn.addEventListener('click', function(e) {
                oneClickUpsellGetCheckoutUrl({redirect:true});
            });
        }
        {% endif %}

        {% if template.name == 'cart' %}
          new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.type === 'attributes' && mutation.target === docArticle) {
                try {
                  smar7Integration();
                } catch(e) {}
              }
            });
          })
          .observe(document, {
             subtree: true,
             attributes: true
          });

          //SyncQtyFields.init();
        {% endif %}

        {% if upsell_cart_include_upsells == 'true' or template.name != 'cart' %}
            jQ(upsellCheckoutButtonSelectors).attr('data-ocu-checkout', true);

            Array.prototype.forEach.call(document.querySelectorAll('a'), function(link) {
                var isNeededHref = permalink.test(link.href);
                if (isNeededHref) link.dataset.ocuCheckoutLink = true;
            });

                if (isSwellInstalled) swellIntegration();

                jQ(upsellCheckoutButtonSelectors).attr('data-disable-recharge', true);

                document.addEventListener('mousedown', function(e) {
                    if (needPreventRedirect(e.target)) return;

                    var amazonForm = e.target.closest('form[action^="https://payments.amazon"]');
                    if (amazonForm && lqd.amazon_pay) {
                        e.preventDefault();
                        e.stopPropagation();

                        var path = {
                            ocu: lqd.proxy_url + '/amazon/forward',
                            shopify: amazonForm.querySelector('[name="redirectURL"]').value
                        };

                        if (e.target.closest('form[action="/cart/add"]')) {
                            var cart = document.querySelector('form[action="/cart/add"]');
                            var button = amazonForm.querySelector('[type="submit"]');
                            return addToCart(cart, button, path);
                        }

                        return oneClickUpsellGetCheckoutUrl()
                            .then(function(res) {
                                var reg = new RegExp(lqd.proxy_url + '\\/(.+)\\??');
                                var match = reg.exec(res.checkout_url);
                                var token = match && match[1];
                                utils.cookie.set('ocu_checkout_token', token, utils.cookie.options);
                                location = path[res.status ? 'ocu' : 'shopify'];
                            })
                            .catch(function(res) { location = path.shopify });
                    }

                    if (e.target.dataset.skipCart === 'true' || e.target.closest('[data-skip-cart]')) {
                        var form = e.target.closest('form[action="/cart/add"]') || document.querySelector('form[action="/cart/add"]');
                        var button = e.target.dataset.skipCart === 'true' ? e.target : e.target.closest('[data-skip-cart]');

                        if (!form) return;

                        e.preventDefault();
                        e.stopPropagation();
                        submitted = true;

                        return addToCart(form, button);
                    }

                    var isInclude = Array.prototype.some.call(jQ(upsellCheckoutButtonSelectors), function(el) {
                        return el === e.target || e.target.dataset.ocuCheckout === 'true';
                    });

                    var parent = !isInclude
                        && (e.target.closest('[data-ocu-checkout]')
                        || e.target.closest('form[action="/checkout"] [type="submit"]')
                        || e.target.closest('form[action="/cart"] [type="submit"]'));

                    if (!isInclude && !parent || e.target.closest('form[action="/cart/add"]')) return;

                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                }, true);

                document.addEventListener('touchstart', function(e) {
                    if (needPreventRedirect(e.target)) return;

                    var isInclude = Array.prototype.some.call(jQ(upsellCheckoutButtonSelectors), function(el) {
                        return el === e.target || e.target.dataset.ocuCheckout === 'true';
                    });

                    var parent = !isInclude
                        && (e.target.closest('[data-ocu-checkout]')
                        || e.target.closest('form[action="/checkout"] [type="submit"]')
                        || e.target.closest('form[action="/cart"] [type="submit"]'));

                    if (!isInclude && !parent || e.target.closest('form[action="/cart/add"]')) return;

                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();

                  upsellsCheckoutRedirect(e);
                }, true);

                document.addEventListener('click', handleDocumentClick, true);

                if (window.RevyApp) RevyApp.events.updatedCart = [];

                if (lqd.amazon_pay) {
                    window.onAmazonLoginReady = amazonPayIntegration;
                    if (window.onAmazonLoginReady && !amazonPayInitiated) amazonPayIntegration();
                }

                handleCheckoutLinks();
                //handleCartAddLink();
                if (/shoptimized/i.test(Shopify.theme.name)) handleBuyNowBtn();

                window.reChargeProcessCart = function() { oneClickUpsellGetCheckoutUrl({ redirect: true }); }

                function handleCheckoutLinks() {
                    jQ(document).ajaxComplete(function(event,request, settings){
                        if (settings.url !== '/cart/add.js') return;
                        setTimeout(function() {
                            var checkoutLinks = document.querySelectorAll('a[href="/checkout"]');
                            Array.prototype.forEach.call(checkoutLinks, function(link) {
                                if (!link) return;
                                link.addEventListener('click', function(e) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                    buyNowClicked = true;
                                    oneClickUpsellGetCheckoutUrl({redirect:true});
                                });
                            });
                        }, 500)
                    });
                }



                function handleBuyNowBtn() {
                    if (!lqd.themeSkipCart || lqd.themePopup && lqd.isThemePopupTag) return;

                    var buyNowBtn = document.querySelector('button[id="AddToCart"]');
                    if (!buyNowBtn) return;
                    var innerTextEl = buyNowBtn.querySelector('#AddToCartText');

                    if(!/buy\s*(it)?\s*now/i.test(innerTextEl && innerTextEl.innerText)) return;

                    buyNowBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        var data = jQ(buyNowBtn.closest('form[action="/cart/add"]')).serialize();

                        jQ.post('/cart/add.js', data).always(function() {
                            oneClickUpsellGetCheckoutUrl({ redirect: true })
                        });
                    });
                }
            var SyncQtyFields = {
                init: function() {
                    if (!this.fields.length) return;
                    this.listenEvents();
                },
                get fields() {
                    return document.querySelectorAll('[data-quantity-item]');
                },
                getFiledsForUpdate: function(target) {
                    var id = this.getId(target);
                    var elems = document.querySelectorAll('[data-quantity-item="' + id + '"]');
                    var arr = this.getArray(elems);

                    return arr;
                },
                getId: function(target) {
                    return target.dataset.quantityItem;
                },
                getArray: function(nodeList) {
                    return Array.prototype.slice.call(nodeList);
                },
                update: function(target, value) {
                    this.getFiledsForUpdate(target).forEach(function(field) {
                        field.value = value;
                    });
                },
                handle: function(e) {
                    this.update(e.target, e.target.value);
                },
                listenEvents: function(e) {
                    this.getArray(this.fields).forEach(function(field) {
                        field.addEventListener('input', this.handle.bind(this));
                    }.bind(this));
                }
            }.init();
        {% endif %}

        function amazonPayIntegration() {
            if (!window.amazon) return;
            var button = document.querySelector('[data-amazon-payments-pay-button]');
            if (button) return new Integration(button);

            function Integration(button, amazonForm, cartForm) {
                this.path = {
                    ocu: lqd.proxy_url + '/amazon/forward'
                };
                this.elems = {
                    button: button,
                    widgetBtn: !amazonForm && button.querySelector('#OffAmazonPaymentsWidgets0'),
                    clone: button.cloneNode(true),
                    sibling: button.previousElementSibling,
                    parent: button.parentElement,
                    get cloned() {
                        return document.querySelector('[data-ocu-clone-amazon]');
                    }
                };
                this._insert = function(el, pos) {
                    el.insertAdjacentHTML(pos, this.elems.clone.outerHTML);
                };
                this.insert = function() {
                    var sibling = this.elems.sibling;
                    var elem = sibling ? 'sibling' : 'parent';
                    var position = sibling ? 'afterend' : 'afterbegin';
                    this._insert(this.elems[elem], position);
                };
                this.req = function(res) {
                    if (!res.status) return this.elems.widgetBtn.click();

                    var reg = new RegExp(lqd.proxy_url + '\\/(.+)\\??');
                    var match = reg.exec(res.checkout_url);
                    var token = match && match[1];
                    utils.cookie.set('ocu_checkout_token', token, utils.cookie.options);
                    location = this.path.ocu;
                };
                this.click = function(e) {
                    if (amazonForm) {
                        e.preventDefault();
                        this.path.shopify = amazonForm.querySelector('[name="redirectURL"]').value;
                        return addToCart(cartForm, this.elems.button, this.path);
                    }
                    oneClickUpsellGetCheckoutUrl().then(this.req.bind(this)).catch(redirectToCheckout);
                };
                this.listenEvents = function() {
                    this.elems.cloned.addEventListener('click', this.click.bind(this), { once: true });
                };
                this.init = function() {
                    amazonPayInitiated = true;
                    this.elems.button.classList.add('ocu-hidden');
                    this.elems.clone.dataset.ocuCloneAmazon = true;
                    this.insert();
                    this.listenEvents();
                };
                this.init();
            };

            var Observer = function() {
              	this.observed = false;
                this.config = { subtree: true, attributes: true };
                this.observer = new MutationObserver(this.mutations.bind(this));
                this.observer.observe(document, this.config);
            };
            Observer.prototype = {
                mutations: function(mutations) {
                    return mutations.forEach(this.mutation.bind(this));
                },
                mutation: function(mutation) {
                    if (mutation.type !== 'attributes') return;
                    var target = mutation.target;

                    if (
                        target.id !== 'OffAmazonPaymentsWidgets0'
                        && target.dataset.shopify !== 'payment-button'
                        && target.dataset.testid !== 'sheet-entered'
                        && target.dataset.testid !== 'sheet-open-button'
                    ) { return; }

                  var button = mutation.target.closest('[data-amazon-payments-pay-button]');
                  if (button) return new Integration(button);

                  var forms = document.querySelectorAll('form[action="https://payments.amazon.com/checkout/signin"]');
                  if (!forms.length) return;

                  Array.prototype.forEach.call(forms, function(form) {
                      var clone = form.innerHTML;
                      var parent = form.parentNode;

                      var newForm = document.createElement('form');
                      newForm.innerHTML = clone;
                      parent.innerHTML = '';
                      parent.appendChild(newForm);
                      newForm.addEventListener('submit', function(e) {
                          e.preventDefault();
                          var cart = document.querySelector('form[action="/cart/add"]');
                          var button = newForm.querySelector('[type="submit"]');
                          var path = {
                              ocu: lqd.proxy_url + '/amazon/forward',
                              shopify: newForm.querySelector('[name="redirectURL"]').value
                          };
                          addToCart(cart, button, path);
                      });
                  });
                }
            };
            new Observer();
      	}

        function smar7Integration() {
          if (!SMAR7.bundle) {
                var count = 0;
                var interval = setInterval(function() { // for ie
                    if (SMAR7.bundle && SMAR7.bundle.isIntegrated) return;
                    count++;
                    if (count > 4) clearInterval(interval);
                    if (SMAR7.bundle) {
                        SMAR7.bundle.redirect = redirect;
                        SMAR7Integration = true;
                        clearInterval(interval);
                    }
                }, 1000);
            } else {
                SMAR7.bundle.redirect = redirect;
                SMAR7.bundle.isIntegrated = true;
            }

            function redirect(discount) {
                var button, path;

                if (discount) {
                    SMAR7.util.setCookie('smar7coupon', discount, 3600);
                } else {
                    discount = SMAR7.bundle.helper.getCoupon();
                }

                if (SMAR7.paypal) {
                    path = '/checkout?goto_pp=paypal_express&discount=' + encodeURIComponent(discount);
                    button = jQ('[name="goto_pp"]');
                } else {
                    path = '/checkout?discount=' + encodeURIComponent(discount);
                    button = jQ('[name="checkout"], [href="/checkout"], form[action="/checkout"] input[type="submit"], #checkout');
                }

                var params = !discount ? {} : {
                  params: [{ discount: discount }]
                };

                oneClickUpsellGetCheckoutUrl(params)
                  .then(function(res) {
                      SMAR7Integration = false;
                      location = res.checkout_url;
                  })
                  .catch(function() {
                      location = path;
                  });
            };
        }

        function boldIntegration(form) {
            var cfg = {
                protocol: 'https://',
                host: 'recurringcheckout.com',
              	proxy: '/s/',
                permanent: /(\w+)\.myshopify\.com/.exec(BOLD.common.Shopify.shop.permanent_domain)[1],
                path: '/checkout/recurring/',
                query: '?shop_url=' + location.host
            };

            form.action = cfg.protocol + cfg.host + cfg.proxy + cfg.permanent + cfg.path + token + cfg.query;
            form.submit();
        }

        function isBoldRecuring() {
            var boldRecurringEl = document.querySelector('[data-bold-recurring]');
            var isBoldRecuring = boldRecurringEl && boldRecurringEl.checked;
            return isBoldRecuring;
        }

        function boldRecurringIntegration() {
            var clones = document.querySelectorAll('[data-ocu-clone]');
            var clone = Array.prototype.filter.call(clones, function(i) { return i && !i.dataset.ocuCheckout })[0];
            if (clone) clone.click();
        }

        function isRechargeProduct(cart) {
            return cart.items.some(function(item) {
                return item.properties && item.properties.subscription_id;
            });
        }

        function getRechargeCheckoutUrl(cart) {
            var gaLinker = function() {
                try {
                    return '&' + ga.getAll()[0].get('linkerParam');
                } catch (e) {
                    return '';
                }
            };

            var customerParams = function() {
                return lqd.customer.id ? '&customer_id=' + lqd.customer.id + '&customer_email=' + lqd.customer.email : '';
            };

            var url = 'https://checkout.rechargeapps.com/r/checkout?myshopify_domain='
                + lqd.permanent_domain
                + '&cart_token='
                + cart.token
                + gaLinker()
                + customerParams();

            return url;
        }


        function ReachargeInit(cart, target) {
            var form = target && target.closest('form');

            var url = (form && form.action === '/cart/add')
                ? '/cart'
                : getRechargeCheckoutUrl(cart);

            return url;
        }

        function swellIntegration() {
            if (!lqd.customer_id) return;

            jQ(upsellCheckoutButtonSelectors).attr('disabled', true);
            setTimeout(function() {
                jQ(upsellCheckoutButtonSelectors).attr('disabled', false);
            }, 8000);
            jQ(document).on('swell:initialized', function() {
                jQ(upsellCheckoutButtonSelectors).attr('disabled', false);
            });
        }

        function initSkipCart() {
            if (lqd.themePopup && lqd.isThemePopupTag) return;
            var isSkipCartPage = /index|collection|product/.test(lqd.template_name);
            lqd.skip_cart && isSkipCartPage && setTimeout(function() { removeAddToCartEvents() });
        }

        function removeAddToCartEvents() {
            var forms = document.querySelectorAll('form[action*="cart"], [data-zp-add-to-cart-form], #AddToCartForm1');
            var elems = [];

            Array.prototype.forEach.call(forms, function(form) {
                var buttons = form.querySelectorAll('*[type="submit"], button');

                Array.prototype.forEach.call(buttons, function(button) {
                    elems.push({
                        button: button,
                        sibling: button.previousElementSibling,
                        parent: button.parentElement,
                    });
                });
            });

            elems.forEach(function(item) {
                if (item.button.dataset.qty) return;
                if (item.button.getAttribute('aria-controls')) return;
                if (/plus|minus/.test(item.button.className)) return;
                if (/error_txt|quantity|sold-out/i.test(item.button.id)) return;
                if (/amount|review/i.test(item.button.value)) return;

                item.button.removeAttribute('onclick');
                item.button.dataset.skipCart = true;
                item.button.type = 'button';

                try {
                    item.sibling
                        ? item.sibling.insertAdjacentHTML('afterend', item.button.outerHTML)
                        : item.parent.insertAdjacentHTML('afterbegin', item.button.outerHTML);
                } catch (e) {
                    console.warn(e);
                }

                item.button.dataset.ocuClone = true;
                item.button.classList.add('ocu-hidden');
            });

            listenAddToCartEvents(forms);
        }

        function listenAddToCartEvents(forms) {
            var submitted = false;

            Array.prototype.forEach.call(forms, function(form) {
                var buttons = form.querySelectorAll('[data-skip-cart]');

                Array.prototype.forEach.call(buttons, function(button) {
                    button.addEventListener('click', function(e) {
                        if (isBoldRecuring()) return boldRecurringIntegration();
                        e.stopPropagation();
                        e.preventDefault();

                        if (submitted) return;
                        if (!button.closest('form')) form = document.querySelector('form[action="/cart/add"]');
                        submitted = true;
                        addToCart(form, button);
                    });
                });
            });
        }

        function initBuyNow() {
            if (lqd.template_name !== 'product') return;

            var container = document.querySelector('[data-shopify="payment-button"]');
            if (!container) return;

            //var isGooglePay = window.google && google.payments && google.payments.api;
            //var isEnablePopupForChromeAndroid = isGooglePay && google.payments.api.EnablePopupForChromeAndroid;
            //var isAndroid = /android/i.test(navigator.userAgent);
            //if (isAndroid) return;

            container.style.visibility = 'visible';

            document.addEventListener('click', buyNow.bind(this, container), true);
        }

        function buyNow(container, e) {
            var button = container.querySelector('.shopify-payment-button__button');
            var form = button.closest('form[action*="cart"]');
            var closestBuyNow = e.target.closest('[data-ocu-buy-now]');
            var isPaypalButton = e.target.dataset.testid === 'PayPalInContext-button'
                                || (closestBuyNow && closestBuyNow.querySelector('[data-testid="PayPalInContext-button"]'));

            isPaypalButton = isPaypalButton && lqd.upsell_cart_include_upsells;
            button.dataset.ocuBuyNow = true;

            var item = {
                sibling: button.previousElementSibling,
                parent: button.parentNode,
                clone: button.outerHTML
            };

            button.parentNode.removeChild(button);

            try {
                item.sibling
                    ? item.sibling.insertAdjacentHTML('afterend', item.clone)
                    : item.parent.insertAdjacentHTML('afterbegin', item.clone);
            } catch (e) {
                console.warn(e);
            }

            container.style.visibility = 'visible';
            button = document.querySelector('[data-ocu-buy-now]');

            var preventAction = !e.target.dataset.ocuBuyNow
                && (/submit|button/i.test(e.target.type) ? !e.target.querySelector('[data-ocu-buy-now]') : true)
                && !closestBuyNow
                || buyNowClicked
                || !e.isTrusted
                || !isPaypalButton;

            if (preventAction) return;

            e.preventDefault();
            e.stopImmediatePropagation();

            var canBuyNow =
                (e.target.dataset.testid === 'Checkout-button' || closestBuyNow.dataset.testid === 'Checkout-button' || isPaypalButton)
                && (e.target.closest('form[action="/cart/add"]') || document.querySelector('form[action="/cart/add"]'));

            if (canBuyNow) {
                button.setAttribute('disabled', true);
                buyNowClicked = true;
                addToCart(form, button);
            }
        }

        function addToCart(form, button, path) {
            var noId = function(data) { return !/id/.test(data); };
            var data = jQ(form).serialize();

            if (noId(data)) data = jQ('#AddToCartForm').serialize();

            if (noId(data)) {
                var idOnBtn = document.querySelector('[data-cart-add]');
                if (idOnBtn) data = 'id=' + idOnBtn.dataset.cartAdd;
            }

            var params = {
                type: 'POST',
                url: '/cart/add.js',
                data: data,
                dataType: 'json',

                success: function() {
                    ocuGetCart()
                        .done(function(res) {
                            if (isRechargeProduct(res)) return location = '/cart';

                      	    var handle = function(item) { return item.properties && item.properties.frequency_num };
                      	  	var isBoldSubscription = res.items.some(handle);
                            var isThemeSkipCart = lqd.themeSkipCart;

                            if (!isBoldSubscription) {
                                return oneClickUpsellGetCheckoutUrl()
                                    .then(function(res) {
                                        if (buyNowClicked) return location = res.checkout_url;
                                        if (!path) return location = isThemeSkipCart || res.status ? res.checkout_url : '/cart';

                                        var reg = new RegExp(lqd.proxy_url + '\\/(.+)\\??');
                                        var match = reg.exec(res.checkout_url);
                                        var token = match && match[1];
                                        utils.cookie.set('ocu_checkout_token', token, utils.cookie.options);
                                        location = res.status ? path.ocu : path.shopify;
                                    })
                                    .catch(function() { location.pathname = '/cart' });
                            }

                            try {
                                boldIntegration(form, res.token);
                            } catch (e) {
                                console.warn(e);
                                oneClickUpsellGetCheckoutUrl()
                                    .then(function(res) {
                                        location = isThemeSkipCart || res.status ? res.checkout_url : '/cart';
                                    })
                                    .catch(function() { location.pathname = '/cart' });
                            }
                        })
                        .fail(redirectToCheckout)
                },

                error: function(e) {
                    var desc = e.responseJSON.description;

                    if (e.status !== 422) return alert(desc || 'Something went wrong. Please try again.');

                    var allInCart = /all/i.test(desc);
                    var soldOut = /sold out/i.test(desc);

                    alert(desc);

                    button.setAttribute('disabled', false);

                    if (allInCart) return oneClickUpsellGetCheckoutUrl({ redirect:true });
                    if (soldOut) location.reload();
                }

            };

            jQ.ajax(params);
        }

        function upsellsCheckoutRedirect(event) {
            if (SMAR7Integration) return;

            var form = event.target.closest('[action="/cart"]');
            if (form && !isFormValid(form)) return form.reportValidity();

            var target;
            if (event.target.dataset.ocuCheckout || /checkout/.test(event.target.name) || /checkout/.test(event.target.value)) {
                target = event.target;
            } else {
                target = event.target.closest('[data-ocu-checkout]')
                  || event.target.closest('[name="checkout"]')
                  || event.target.closest('[value="Checkout"]');
            }

            if (!target) {
                target = event.target.closest('[type="submit"]') || event.target;
            }

            if (allowUpsellCheckout(target)) {
                event.stopPropagation();
                event.preventDefault();
                var $el = jQ(target);
                integrationWithOtherApps();

                if (!checkoutButtonState) {
                    checkoutButtonState = true;

                    checkPayPal($el);
                    buildCheckoutParams();
                    ocuVerify(target);
                }
            }
        }

        function isFormValid(form) {
            var elems = form.querySelectorAll('[type="text"], select, textarea');

            var requiredElems = Array.prototype.filter.call(elems, function(el) {
                return el && el.required;
            });

            if (!requiredElems.length) return true;

            return requiredElems.some(function(el) {
                return !el.checkValidity();
            });
        }

        function ocuVerify(target) {
          if (window.catchXHR) {
              catchXHR = false;
              XMLHttpRequest.callbacks = [];
          }

          var onGetCart = function(cart) {
              if (isRechargeProduct(cart)) {
                  var form = target.closest('form');
                  if (form && form.action === '/cart/add') return location = '/cart';

                  var url = ReachargeInit(cart, target);
                  cart.redirect_url = redirect_url = url
              };

              cart.subscription_products = '{{ subscription_products_json }}';
              cart.cart_collections = [{{ cart_collections_json }}];
              cart.cart_products = lqd.cart_products_json;
              cart.customer_id = {{ customer_id }};
              ocuVerifyUpsells(cart);
          };

          var onSaveCart = function() {
              ocuGetCart()
                  .done(onGetCart)
                  .fail(redirectToCheckout);
          };

          var onVerify = function() {
              if (window.beeketingWPJP) beeketingWPJP = {};

              try {
                  ocuSaveCart()
                      .done(onSaveCart)
                      .fail(onSaveCart);
              } catch (e) {
                  redirectToCheckout();
              }
          };

          // if (window.swellAPI) {
          //     var balance = swellAPI.getCustomerDetails().pointsBalance;
          //     if (balance) return redirectToCheckout();
          // }

          ocuVerifyCurrentCartData()
              .done(onVerify)
              .fail(redirectToCheckout);
        }

        function ocuSaveCart() {
            if (lqd.template_name !== 'cart' && jQ('[name="currency"]').length) {
                return jQ.ajax({
                    type: 'POST',
                    url: '/cart/update.js',
                    timeout: redirectTimeout,
                    dataType: 'json',
                    data: { currency: lqd.shop_currency }
               });
            }

            if (SMAR7Integration || lqd.template_name !== 'cart') return jQ.Deferred().resolve();

            var $cart = jQ("form[action^='/checkout'], form[action^='/cart']");

            if (!$cart.length) return jQ.Deferred().resolve();

            if ($cart.length > 1) {
                var isNotePresent = Array.prototype.some.call($cart, function(e) { return e.note  && e.note.value});
                var handle = function(i, e) {
                    return /cart|checkout/.test(e.action) && e['updates[]'] && (isNotePresent ? e.note.value : true);
                };

                $cart = $cart.filter(handle)[0];
            }

            if (!$cart) return jQ.Deferred().resolve();

            jQ($cart).find('input[name="updates[]"][type="hidden"]').attr('disabled', true);

            var data = jQ($cart).serializeArray();

            if (jQ('[name="currency"]').length) {
                data.push({ name: 'currency', value: lqd.shop_currency });
            }

            return jQ.ajax({
                type: 'POST',
                url: '/cart/update.js',
                timeout: redirectTimeout,
                dataType: 'json',
                data: data
            });
        }

        function ocuGetCart() {
            return jQ.ajax({
                cache: false,
                url: '/cart.js',
                timeout: redirectTimeout,
                dataType: 'json'
            });
        }

        function ocuVerifyCurrentCartData() {
            return jQ.ajax({
                cache: false,
                url: getProxyUrl() + '/check_tags',
                timeout: redirectTimeout,
                dataType: 'json'
            });
        }

        function ocuVerifyUpsells(cart, args) {
            var landingSite = utils.cookie.get('_landing_page');
            var referringSite = utils.cookie.get('_orig_referrer');
            var data = {
                shop_domain: lqd.current_domain,
                cart: cart,
                landing_site: landingSite,
                referring_site: referringSite,
                require_paypal: requirePayPal,
                customer: {
                    id: cart.customer_id
                }
            };

            var req = jQ.ajax({
                type: 'POST',
                url: getProxyUrl() + '/check_upsells',
                data: data
            });

            if (args === 'api') return req;

            req.done(function(res) {
                if (!res.status) {
                    if (cart.redirect_url) return location = cart.redirect_url;

                    lqd.skip_cart && /index|collection|product/.test(lqd.template_name)
                         ? (location.pathname = '/cart')
                         : redirectToCheckout();
                    return;
                }

                {% if skip_cart == 'true' and template.name != 'cart' and template.name != 'page' %}
                    integrationWithOtherApps();
                {% endif %}

                if (checkoutParams) {
                    location = res.checkout_url + '?' + checkoutParams;
                } else {
                    location = res.checkout_url;
                }
            }).fail(redirectToCheckout);
        }

        function redirectToCheckout() {
            {% if subscription_products.size > 0 %}
            jQ(upsellCheckoutButtonSelectors).attr('data-ocu-checkout', false);
            jQ(upsellCheckoutButtonSelectors).attr('data-disable-recharge', false);
            jQ(document).find(upsellCheckoutButtonSelectors).trigger('click');
            {% else %}
            window.location = redirect_url || '/checkout?' + checkoutParams;
            {% endif %}
        }

        function integrationWithOtherApps() {
            var discount = document.querySelector('input[name="discount"]');
            var discountCC = utils.cookie.get('discount_code'); // integration with CouponCountdown
            var discountShare = utils.cookie.get('ocu-share-discount');
            var isPopupShown = utils.cookie.get('popupcookie');

            if (window._chpmgr && !isPopupShown) return; // integration with chilliapps exit popup
            if (!discount && !discountCC && !discountShare) return;

            var code;
            if (discount) code = discount.value;
            if (discountCC) {
                code = discountCC;
                utils.cookie.remove('discount_code');
            }
            if (discountShare) {
                code = discountShare;
                utils.cookie.remove('ocu-share-discount');
            }

            var param = {
                name: 'discount',
                value: encodeURIComponent(code)
            };

            if (discountShare && lqd.template_name === 'page') return; // zp & shareable discount
            if (param.value) checkoutParamsArray.push(param);

            {% if skip_cart == 'false' and template.name != 'cart' and template.name != 'page' %}
                !buyNowClicked && buildCheckoutParams();
            {% endif %}
        }

        function buildCheckoutParams() {
            for (var i = 0; checkoutParamsArray.length > i; i++) {
                var reg = new RegExp(checkoutParamsArray[i].name);
                if (reg.test(checkoutParams)) continue;
                checkoutParams += checkoutParamsArray[i].name + '=' + checkoutParamsArray[i].value;
                if (i + 1 !== checkoutParamsArray.length) checkoutParams += '&';
            }
        }

        function checkPayPal($el) {
            if (($el.attr('name') == 'goto_pp') && ($el.val() == 'paypal_express')) {
                checkoutParamsArray.push({name: $el.attr('name'), value: $el.val()});
                requirePayPal = true;
            }
        }

        function updateCart(cart) {
            if (isRechargeProduct(cart)) {
                var url = ReachargeInit(cart);
                cart.redirect_url = redirect_url = url;
            };

            cart.subscription_products = '{{ subscription_products_json }}';
            cart.cart_collections = [{{ cart_collections_json }}];
            cart.cart_products = lqd.cart_products_json;
            cart.customer_id = {{ customer_id }};
            return cart;
        }

        function ocuVerifyUpsellsApi(cart) {
            return ocuVerifyUpsells(updateCart(cart), 'api');
        }

        function allowUpsellCheckout(el) {
            var result = true;

            {% if subscription_products.size > 0 %}
            if (jQ(el).attr('data-ocu-checkout') && jQ(el).attr('data-ocu-checkout') != 'true') {
                result = false;
            }
            {% endif %}
            if (window.mixed_cart == true) { //integration with Recurring Orders & Subscriptions by Bold
                result = false;
            }
            if (window.popup_upsell && (jQ('#upsellclosebtn').length == 0)) { // integration with Product Upsell
                result = false;
            }
            if (window.ol_checkout_ok instanceof Function && !ol_checkout_ok()) return; // integration with OrderLogic

            if (el.dataset.zpaSubmitButton === '') return; // integration with ZipifyPages CRM popup

            if (window.vitals_upsells) return; // integration with Vitals

            return result;
        }

        function getProxyUrl() {
            return lqd.proxy_url || lqd.proxy_url_default;
        }

        window.addEventListener("pageshow", function() {
            checkoutButtonState = false;
        });

        window.addEventListener("pagehide", function() {
            checkoutButtonState = false;
        });

        history.pushState = (function(f) {
            return function() {
                var result = f.apply(this, arguments);
                window.dispatchEvent(new Event('pushState'));
                window.dispatchEvent(new Event('locationchange'));
                return result;
            };
        })(history.pushState);

        history.replaceState = (function(f) {
            return function() {
                var result = f.apply(this, arguments);
                window.dispatchEvent(new Event('replaceState'));
                window.dispatchEvent(new Event('locationchange'));
                return result;
            };
        })(history.replaceState);

        window.addEventListener('popstate', function() {
            window.dispatchEvent(new Event('locationchange'));
        });

        window.addEventListener('locationchange', function() {
            document.removeEventListener('click', handleDocumentClick, true);
            document.addEventListener('click', handleDocumentClick, true);
        });
    };

    var script = document.createElement('script');
    document.head.appendChild(script);
    script.type = 'text/javascript';
    script.src = "//ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js";
    script.onload = function() {
        var jq310 = window.jQuery.noConflict(true);
        ocuCallback(jq310);
    };
  })();
</script>

 {% assign upsellapp_included = true %}
{% endunless %}
